// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using webApi;

namespace server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210410160816_inital")]
    partial class inital
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("webApi.Domain.Entities.AddressEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("street");

                    b.HasKey("Id");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("webApi.Domain.Entities.EmployeeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("surname");

                    b.Property<long?>("address_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("address_id");

                    b.HasIndex("user_id")
                        .IsUnique();

                    b.ToTable("employees");
                });

            modelBuilder.Entity("webApi.Domain.Entities.EmployeeProjectEntity", b =>
                {
                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("EmployeeId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("employees_projects");
                });

            modelBuilder.Entity("webApi.Domain.Entities.ProjectEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Budget")
                        .HasColumnType("bigint")
                        .HasColumnName("budget");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("webApi.Domain.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.ToTable("_adm_users");
                });

            modelBuilder.Entity("webApi.Domain.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("webApi.Domain.Entities.AddressEntity", "AddressEntity")
                        .WithMany("EmployeeEntities")
                        .HasForeignKey("address_id");

                    b.HasOne("webApi.Domain.Entities.UserEntity", "UserEntity")
                        .WithOne("EmployeeEntity")
                        .HasForeignKey("webApi.Domain.Entities.EmployeeEntity", "user_id");

                    b.Navigation("AddressEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("webApi.Domain.Entities.EmployeeProjectEntity", b =>
                {
                    b.HasOne("webApi.Domain.Entities.EmployeeEntity", "EmployeeEntity")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webApi.Domain.Entities.ProjectEntity", "ProjectEntity")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeEntity");

                    b.Navigation("ProjectEntity");
                });

            modelBuilder.Entity("webApi.Domain.Entities.AddressEntity", b =>
                {
                    b.Navigation("EmployeeEntities");
                });

            modelBuilder.Entity("webApi.Domain.Entities.EmployeeEntity", b =>
                {
                    b.Navigation("EmployeeProjects");
                });

            modelBuilder.Entity("webApi.Domain.Entities.ProjectEntity", b =>
                {
                    b.Navigation("EmployeeProjects");
                });

            modelBuilder.Entity("webApi.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("EmployeeEntity");
                });
#pragma warning restore 612, 618
        }
    }
}
